#!/usr/bin/env python3

import os
import re
import sys
from subprocess import call
from itertools import groupby

revision = '200406'

description = """
mapfaster [ revision %s ]

Written by:
  Wayland Yeung
  
""" % revision

class xmaBlock:
    def __init__(self, name, stream):
        head = re.compile(r'^\[0_\((.+?)\)\=(.+?)\((.+?)\)(.+)$')
        div  = lambda x: head.search(x).groups()
        _, self.name, seqs, info = div(name)
        self._stream = stream
        self.npos    = next(self._stream).count('*')
        assert self.npos>0
    
    def __iter__(self):
        return self.walk(fx_name=None, fx_seq=None)
    
    def walk(self, fx_name=None, fx_seq=None):
        fx_name  = fx_name if fx_name != None else lambda x: x
        fx_seq   = fx_seq  if fx_seq  != None else lambda x: x
        fmnam    = re.compile(r'^(.+?) +{\|(.+?)\((.+?)\)\|}(.+) +$')

        frstlast = lambda x: ' '.join((x[0],x[-1]))
        def namer(x):
            r    = fmnam.search(x)
            return x.strip() if r == None else frstlast(r.groups())

        # fmseq    = re.compile(r'^{\((.*?)\)(.+?)\((.*?)\)}\*$') # old regex matcher 
        # seqer    = lambda x: fmseq.search(x).groups() 

        fmseq    = re.compile(r'(.*?)\{\((.*?)\)(.+?)\((.*?)\)\}(.*?)\*$') # should also cover mapgap's formatting glitch
        def seqer(rawstring):
            s = fmseq.search(rawstring).groups()
            assert 0 in tuple(map(len, s[0:2]))
            assert 0 in tuple(map(len, s[3:5]))
            return s[0]+s[1], s[2], s[3]+s[4]

        walker   = groupby(self._stream, lambda x: x.startswith('$'))
        while not next(walker):
            continue
        for k, g in walker:
            if k:
                continue
            yield fx_name(namer(next(g))), fx_seq(seqer(next(g)))

class xmaReader:
    def __init__(self, infile):
        self.infile = infile
        
    def __iter__(self):
        return self.walk()

    def walk(self):
        isheader = lambda x: x.startswith('[0_')
        for k, g in groupby(open(self.infile), isheader):
            if k:
                name = next(g).strip()
            else:
                yield xmaBlock(name, g)

    def gen_cfa(self, *args):
        assert 1 == len(set(i.npos for i in self))
        ispos  = lambda x: not x.islower()
        poslen = lambda x: sum(1 for i in x[1][1] if ispos(i))
        names  = []
        alen   = poslen(next(iter(next(iter(self)))))
        for block in self:
            assert block.name not in names
            names += [block.name]
            for s in block:
                assert poslen(s)==alen
        for block in self:
            for s in block:
                yield s, block.name

class fastaReader:
    """
    An iterator to read FA files
    returns (name, seq)
    """
    def __init__(self, infile):
        self.infile = infile
    
    def __iter__(self):
        return self.walk(fx_name=lambda x: x[1:])
        
    def walk(self, fx_name=None, fx_seq=None):
        fx_name = fx_name if fx_name != None else lambda x: x
        fx_seq  = fx_seq  if fx_seq  != None else lambda x: x
        isseq   = lambda x: x[1].startswith('>')
        names   = lambda x: [(i[0], i[1].strip()) for i in x]
        flip    = lambda x: list(zip(*list(x)))
        aggseq  = lambda x: fx_seq(''.join(i.strip() for i in flip(x)[1]))
        first   = True
        for k, g in groupby(enumerate(open(self.infile)), isseq):
            if k:
                first=False
                g = names(g)
                for n, i in names(g)[:-1]:
                    yield fx_name(i), fx_seq('')
                now = names(g)[-1][1]
            else:
                if first:
                    continue
                yield fx_name(now), aggseq(g)
                
    def validated_walk(self, v=1):
        hasid = lambda x: x[0]=='>'
        hassq = lambda x: x[1]==''
        for n, i in enumerate(self.walk()):
            n += 1
            if n%100==0 and v>1:
                sys.stderr.write('CURRENTLY READING : %s\r'%n)
            if any((hasid(i), hassq(i))):
                if v>0: 
                    sys.stderr.write('INVALID ENTRY     : %s\n'%n)
                continue
            yield i
        sys.stderr.write('CURRENTLY READING : %s\n'%n)

class MapFaster:
    def __init__(self, infile, profile='', nsplits=1, threads=1, sense=0.9, outfile=None, parallel='parallel', mapgaps='mapgaps'):
        self.mapgaps    = mapgaps
        self.parallel   = parallel
        self.profile    = profile
        
        self.infile     = infile
        self.infile     = os.path.abspath(self.infile)
        self.workdir    = os.path.dirname(self.infile)+'/'
        
        rename          = lambda x: x[:-3]+'.a2m' if x.endswith('.fa') else x+'.a2m'
        self.outfile    = rename(self.infile) if outfile==None else outfile

        assert nsplits >= threads 
        self.nsplits    = nsplits
        self.threads    = threads
        
        self.sense      = sense
    
    def run(self):
        def split_input(infile, nsplit):
            fr     = fastaReader(infile)
            t      = sum(1 for i in fr.validated_walk(v=2))
            m, s   = t%nsplit, int(t/nsplit)
            split  = [s+1 if i<m else s for i in range(nsplit)]
            part   = lambda x: str(x+1).rjust(len(str(nsplit)), '0')
            partf  = [(('%s.part%s' % (infile, part(n))), i) for n, i in enumerate(split)]
            assert t == sum(split)
            wi     = iter(fr.validated_walk(v=0))
            for f, n in partf:
                sys.stderr.write('SPLITTING         : %s\r' % f)
                with open(f, 'w') as w:
                    for _ in range(n):
                        nex = next(wi)
                        w.write('%s\n%s\n\n' % (nex[0], nex[1].replace('-','').upper())) # remove gaps
            sys.stderr.write('\n')
            return [i[0] for i in partf]

        
        fpipe    = self.infile+'.PIPE'
        fpcmd    = self.infile+'.PCMD'
        
        fsplit   = split_input(self.infile, self.nsplits)
        mgc      = lambda x: '%s %s %s -O -I=999999999:999999999 -sense=%s' % (
            self.mapgaps, self.profile, x, self.sense)
        with open(fpipe, 'w') as w:
            w.write('\n'.join(mgc(i) for i in fsplit))
        with open(fpcmd, 'w') as w:
            w.write('%s -u -j %s < %s' % (self.parallel, self.threads, fpipe))
        sys.stderr.write('ALIGNING ...\n')
        call(['bash',fpcmd])
        os.remove(fpipe)
        os.remove(fpcmd)
        for i in fsplit:
            os.remove(i)

        xp       = frozenset(i.split('/')[-1] for i in fsplit)
        xs       = frozenset(['.cma','.seq','.mma'])
        prefix   = lambda x: any(x.startswith(i) for i in xp)
        suffix   = lambda x: any(x.endswith(i) for i in xs)
        mgpout   = lambda x: prefix(x) and suffix(x)
        left     = len(self.infile.split('/')[-1])+5
        parto    = lambda x: x[left:].split('.')[0].split('_')
        frago    = lambda x: (int(x[0]), int(x[1]) if x[1].isnumeric() else -1)
        frag     = lambda x: frago(parto(x))[::-1]
        mgpout   = sorted((i for i in os.listdir(self.workdir) if mgpout(i)), key=frag)

        with open(self.outfile, 'w') as w:
            for f in mgpout:
                r,p = frag(f)
                f   = self.workdir+f
                if r<0:
                    os.remove(f)
                    continue
                if f.endswith('.seq'):
                    os.remove(f)
                else:
                    sys.stderr.write('MERGING           : %s\r' % f.split('/')[-1])
                    xma = xmaReader(f)
                    it  = iter(xma.gen_cfa())
                    (na, se), pr = next(it)
                    sys.stderr.write('DROPPING ENTRY    : %s\n' % na[1:])
                    for (na, se), pr in it:
                        w.write('%s profile=%s\n%s%s%s\n\n' % (na,pr,se[0].lower(),se[1],se[2].lower()))
                    os.remove(f)
            sys.stderr.write('\n')
        return self.outfile

    def run_featurize(self):
        def split_input(infile, nsplit):
            fr     = fastaReader(infile)
            t      = sum(1 for i in fr.validated_walk(v=2))
            m, s   = t%nsplit, int(t/nsplit)
            split  = [s+1 if i<m else s for i in range(nsplit)]
            part   = lambda x: str(x+1).rjust(len(str(nsplit)), '0')
            partf  = [(('%s.part%s' % (infile, part(n))), i) for n, i in enumerate(split)]
            assert t == sum(split)
            wi     = iter(fr.validated_walk(v=0))
            for f, n in partf:
                sys.stderr.write('SPLITTING         : %s\r' % f)
                with open(f, 'w') as w:
                    for _ in range(n):
                        nex = next(wi)
                        w.write('%s\n%s\n\n' % (nex[0], nex[1].replace('-','').upper())) # remove gaps
            sys.stderr.write('\n')
            return [i[0] for i in partf]

        class IterFLF:
            def __init__(self, fafile):
                self._fafile = fafile
                self.isname = lambda l: l[0]=='>'

            def __iter__(self):
                self._r = open(self._fafile)
                self._i = groupby(self._r, self.isname)
                self._s = False
                return self

            def __next__(self):
                while True:
                    head, group = next(self._i)
                    if not head and self._s:
                        self._s = False
                    elif head:
                        line = next(group)
                    else:
                        group = [i.rstrip() for i in group if not i.isspace()]
                        assert len(set([len(i) for i in group])) == 1
                        return line.rstrip()[1:], group

        fpipe    = self.infile+'.PIPE'
        fpcmd    = self.infile+'.PCMD'

        nofeat   = self.infile+'.nofeat'
        with open(nofeat, 'w') as w:
            for name, d in IterFLF(self.infile):
                w.write('>%s\n%s\n\n'%(name, d[0]))
        
        fsplit   = split_input(nofeat, self.nsplits)

        mgc      = lambda x: '%s %s %s -O -I=999999999:999999999 -sense=%s' % (
            self.mapgaps, self.profile, x, self.sense)
        with open(fpipe, 'w') as w:
            w.write('\n'.join(mgc(i) for i in fsplit))
        with open(fpcmd, 'w') as w:
            w.write('%s -u -j %s < %s' % (self.parallel, self.threads, fpipe))
        sys.stderr.write('ALIGNING ...\n')
        call(['bash',fpcmd])
        os.remove(fpipe)
        os.remove(fpcmd)
        os.remove(nofeat)
        for i in fsplit:
            os.remove(i)

        xp       = frozenset(i.split('/')[-1] for i in fsplit)
        xs       = frozenset(['.cma','.seq','.mma'])
        prefix   = lambda x: any(x.startswith(i) for i in xp)
        suffix   = lambda x: any(x.endswith(i) for i in xs)
        mgpout   = lambda x: prefix(x) and suffix(x)
        left     = len(nofeat.split('/')[-1])+5
        parto    = lambda x: x[left:].split('.')[0].split('_')
        frago    = lambda x: (int(x[0]), int(x[1]) if x[1].isnumeric() else -1)
        frag     = lambda x: frago(parto(x))[::-1]
        mgpout   = sorted((i for i in os.listdir(self.workdir) if mgpout(i)), key=frag)

        with open(self.outfile, 'w') as w:
            for f in mgpout:
                r,p = frag(f)
                f   = self.workdir+f
                if r<0:
                    os.remove(f)
                    continue
                if f.endswith('.seq'):
                    os.remove(f)
                else:
                    sys.stderr.write('MERGING           : %s\r' % f.split('/')[-1])
                    xma = xmaReader(f)
                    it  = iter(xma.gen_cfa())
                    (na, se), pr = next(it)
                    sys.stderr.write('DROPPING ENTRY    : %s\n' % na[1:])
                    for (na, se), pr in it:
                        w.write('%s profile=%s\n%s%s%s\n\n' % (na,pr,se[0].lower(),se[1],se[2].lower()))
                    os.remove(f)
            sys.stderr.write('\n')
            
        def overlay(features, alignment):
            def ovl(ref, target):
                assert len(target) == sum(i!='-' for i in ref)
                n, o = 0, ''
                for i in ref:
                    if i != '-':
                        o += target[n]
                        n += 1
                    else:
                        o += '-'
                return o
            has  = set(i[0].split()[0] for i in IterFLF(alignment))
            info = dict(i for i in IterFLF(features) if i[0].split()[0] in has)


            outfile = alignment+'+'
            with open(outfile, 'w') as w:
                for name, seq in IterFLF(alignment):
                    out = '>%s\n%s\n%s\n\n' % (name, seq[0], '\n'.join([ovl(seq[0], s) for s in info[name.split()[0]][1:]]))
                    w.write(out)
            return outfile
        
        self.outfileplus = overlay(self.infile, self.outfile)
        
        return self.outfile, self.outfileplus

###################################################################
import argparse

parser = argparse.ArgumentParser(description=description, usage=argparse.SUPPRESS, formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument('-profile', type=str  , help="alignment profile",                                default='')
parser.add_argument('-s'      , type=int  , help="number of times to split the input ; default 1"  , default=1)
parser.add_argument('-t'      , type=int  , help="number of threads                  ; default 1"  , default=1)
parser.add_argument('-sense'  , type=float, help="orginal sense option               ; default 0.9", default=0.9)
parser.add_argument('-f'                  , help="flag for inputting string-featurized alignments" , action='store_true')
args, unk = parser.parse_known_args()

PARALLEL = 'parallel'
MAPGAPS  = 'mapgaps'

mapper   = MapFaster(unk[0],
                     profile  = args.profile,
                     parallel = PARALLEL,
                     mapgaps  = MAPGAPS,
                     outfile  = None,
                     nsplits  = args.s,
                     threads  = args.t,
                     sense    = args.sense,
                    )

if args.f:
    mapper.run_featurize()
else:
    mapper.run()

